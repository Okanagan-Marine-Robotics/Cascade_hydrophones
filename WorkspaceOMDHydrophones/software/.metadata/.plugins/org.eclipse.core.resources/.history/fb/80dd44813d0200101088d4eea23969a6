#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_types.h"
#include "math.h"
#include <stdio.h>
#include "xuartps.h"  // Include the UART header for receiving data

#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID  // Adjust this to your UART instance
#define MAX_BUFFER_SIZE  256  // "test" is 4 characters long//118
int bytesReceived = 0;
XUartPs Uart_Ps;  // UART instance
char ReceivedData[MAX_BUFFER_SIZE];  // Buffer for receiving data


int main() {

	init_platform();

	XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);


	xil_printf("helloworld!\n");
	xil_printf("Starting Pinger Triangulation System\n");
	xil_printf("by James Williamsom v:0.1\n");
	int maxTime;
	int maxTime2;
	int state = 0;
	while(1){


// Assuming you're polling UART for data or using interrupts
while (1) {
    // Check if there is data to read
    if (XUartPs_IsReceiveData(XUartPs_Instance)) {
        // Read a byte from the UART receive FIFO
        ReceivedData[bytesReceived] = XUartPs_ReadReg(XUartPs_Instance, XUARTPS_FIFO_OFFSET);

        bytesReceived++;

        // If the buffer is full, check for the condition
        if (bytesReceived == MAX_BUFFER_SIZE) {
            // Print "received" when the buffer is full
            xil_printf("Received: ");

            // Print the first 4 characters of the buffer
            xil_printf("%c%c%c%c\n", ReceivedData[0], ReceivedData[1], ReceivedData[2], ReceivedData[3]);

            // Check if the received data matches "test"
            if (ReceivedData[0] == 't' && ReceivedData[1] == 'e' && ReceivedData[2] == 's' && ReceivedData[3] == 't') {
                xil_printf("Received 'test' command!\n");
            }

            // Reset the buffer after processing
            bytesReceived = 0; // Reset to start over with new data
        } else if (bytesReceived > MAX_BUFFER_SIZE) {
            // Handle buffer overflow (optional)
            xil_printf("Buffer overflow! Resetting...\n");
            bytesReceived = 0; // Reset if the buffer overflows
        }
    }
}



		if (state == 1){



		}
		if (state == 0){
			maxTime = delayGetter(maxTime);
			maxTime2 = delayGetter2(maxTime2);
			double i = maxTime;
			double j = maxTime2;
			double solution[2];

			// Call solver
			solver(i, j, solution);
			//printf("{delayX: {%d},delayY: {%d},x: {%f},y: {%f}}\n",maxTime, maxTime2, solution[0], solution[1]);
		}
	}
	cleanup_platform();
	return 0;
}




int delayGetter (int delay){

	XGpio Gpio;
	XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);

	int i = 1;
	int maxTime;
	int MaxSignal = 0;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio, 1, 100);

     	data = XGpio_DiscreteRead(&Gpio, 2);


         	maxTime = data-2002;



    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);
	}
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}





int delayGetter2 (int delay){

	XGpio Gpio1;
	XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);

	int i = 1;
	int maxTime;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio1, 1, 10);

     	data = XGpio_DiscreteRead(&Gpio1, 2);

     	maxTime = data-2002;
    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);
	}
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}







