#include "xuartps.h"
#include "xil_printf.h"
#include <stdlib.h>  // For atoi
#include "uart_handler.h"

#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID
#define MAX_BUFFER_SIZE 64

void uartHandler(int* state, int* test1, int* test2) {
	XUartPs Uart_Ps;
	u8 ReceivedData[MAX_BUFFER_SIZE];

	XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);

	char message[MAX_BUFFER_SIZE];
	u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);

	int j = 0;
	int instruction = -1;
	int instructionValue = 0;

	while (j < bytesReceived) {
		if (ReceivedData[j] == '<') {
			j++;
			instruction = ReceivedData[j] - '0';  // Safe ASCII digit
			j += 2;  // Skip ':' or other delimiters if needed
			int n = 0;
			while (j < bytesReceived && ReceivedData[j] != '>') {
				message[n++] = ReceivedData[j++];
			}
			message[n] = '\0';
			instructionValue = atoi(message);
		}
		j++;
	}

	if (instruction == 0) *state = instructionValue;
	else if (instruction == 1) *test1 = instructionValue;
	else if (instruction == 2) *test2 = instructionValue;

	xil_printf("Received: %s\n", (char*)ReceivedData);
}
