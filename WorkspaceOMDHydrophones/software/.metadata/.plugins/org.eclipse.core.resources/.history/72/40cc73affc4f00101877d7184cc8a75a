#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_types.h"
#include "math.h"
#include <stdio.h>
#include <string.h>
#include "xuartps.h"  // Include the UART header for receiving data

#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID  // Adjust this to your UART instance
#define MAX_BUFFER_SIZE 64  // "test" is 4 characters long//118

XUartPs Uart_Ps;  // UART instance
u8 ReceivedData[MAX_BUFFER_SIZE];  // Buffer for receiving data
int p=0;

int main() {

	init_platform();



	XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);


	xil_printf("helloworld!\n");
	xil_printf("Starting Pinger Triangulation System\n");
	xil_printf("by James Williamsom v:0.2\n");
	int state = 1;

	int messageLength = 64;
	int offset = 0;
	char message[messageLength];
	while(1){
/*
		u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);
		int j = 0;
		int instruction;
		int instructionValue;
		while (messageLength>j){
		if (ReceivedData[j]=='<') {
			j++;
			instruction = ReceivedData[j] - 48;
			ReceivedData[j]=0;
			j++;
			j++;
			int n = 0;
			while (ReceivedData[j] != '>' && j < messageLength){
				message[n] = ReceivedData[j];
				ReceivedData[j]=0;
				j++;
				n++;
			}
			message[n] = '\0';
			instructionValue = atoi(message);
			}
		j++;
		}

		if (instruction==0){state = instructionValue;}
		else if (instruction==1) {test1=instructionValue;}
		else if (instruction==2) {test2=instructionValue;}
		*/

		//printf("%s", ReceivedData);
		XGpio Gpio3;
		XGpio_Initialize(&Gpio3, XPAR_AXI_GPIO_3_DEVICE_ID);
		if (state == 0){

			int wave=0;
			while (p<=2047) {

			XGpio_DiscreteWrite(&Gpio3, 2, p);
			wave = XGpio_DiscreteRead(&Gpio3, 1);
			printf("{time:%d, amplitude:%d}\n", p,wave);
			p++;
			}
			p=0;
		}

		xcorr();

		usleep(2000000);
	}
	cleanup_platform();
	return 0;
}
