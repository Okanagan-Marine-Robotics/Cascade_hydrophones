#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_types.h"
#include "math.h"
#include <stdio.h>
#include <string.h>
#include "xuartps.h"  // Include the UART header for receiving data

#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID  // Adjust this to your UART instance
#define MAX_BUFFER_SIZE 64  // "test" is 4 characters long//118

XUartPs Uart_Ps;  // UART instance
u8 ReceivedData[MAX_BUFFER_SIZE];  // Buffer for receiving data


int main() {

	init_platform();



	XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);


	xil_printf("helloworld!\n");
	xil_printf("Starting Pinger Triangulation System\n");
	xil_printf("by James Williamsom v:0.2\n");
	int state = 0;
	int maxTime;
	int maxTime2;
	int messageLength = 61;
	int offset = 0;
	int test1 = 0;
	int test2 = 10;
	char message[messageLength];
	while(1){

		 // Receive 4 bytes of data (enough to hold "test")
		u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);

		        // checks state
/*
		//message json {"state":[0]"offset":[0000000]"test1":[00000]"test2":[00000]
		if (bytesReceived > 0) {
		    //xil_printf("received:");
		    message[0] = ReceivedData[0];
		    if (ReceivedData[0] == '{') {
		        xil_printf("{");
		        int i = 1;
		        while (i < messageLength) {

		            u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);

		            if (bytesReceived > 0) {

		                message[i] = ReceivedData[0];
		                //xil_printf("%c", message[i]);
		                i++;
		            }
		        }

		        //sends back message
		        for (int j = 0; j < i; j++) {
		            //xil_printf("%c", message[j]);
		        }

		        //{"state":[0]
		        if (message[10]=='0'){
		        	//state=0;
		        	//xil_printf("state is 0\n");
		        }
		        if (message[10]=='1'){
		        	state=1;
		        	//xil_printf("state is 1\n");
		       }

		        //sets offset
		        offset = 0;
		        for (int i = 27;i>21;i--){
		        	offset = offset + pow(10, 27-i)*(message[i]-'0');
		        }

		        //xil_printf("offset = %d\n", offset);


		       test1 = 0;
		       for (int i = 43;i>=39;i--){
		       	   test1 = test1 + pow(10, 43-i)*(message[i]-'0');
		       }

		        //xil_printf("test1 = %d\n", test1);

		       test2 = 0;
		        for (int i = 58;i>=54;i--){
		        	test2 = test2 + pow(10, 58-i)*(message[i]-'0');
		        }

		        //xil_printf("test2 = %d\n", test2);

		    }
		}
*/
		XGpio Gpio3;
		XGpio_Initialize(&Gpio3, XPAR_AXI_GPIO_3_DEVICE_ID);
		if (state == 0){
			int p=0;
			int wave=0;
			while (p<=2047) {

			XGpio_DiscreteWrite(&Gpio3, 2, p);
			wave = XGpio_DiscreteRead(&Gpio3, 1);
			printf("%d\n", wave);
			p++;
			}
		}
		if (state == 1){
			maxTime = delayGetter(maxTime,test1);
			maxTime2 = delayGetter2(maxTime2,test2);
			double i = maxTime;
			double j = maxTime2;
			double solution[2];

			// Call solver

				double t1 = maxTime;
			    double t2 = maxTime2;
			    double x = 1;
			    double y = 1;
			    double p = tan(asin(((1500.*(t1/1000000.))/(0.5))));
			    double q = tan(asin(((1500.*(t2/1000000.))/(0.5))));
			    x=(-0.25-0.25*(p))/(p*q-1.);
			    y=(x-0.25)/p;
			printf("%s\n", ReceivedData);
			printf("{delayX: {%d},delayY: {%d},x: {%f},y: {%f}}\n",maxTime, maxTime2, x, y);
			usleep(500000);
		}

	}
	cleanup_platform();
	return 0;
}




int delayGetter (int delay,int test1){

	XGpio Gpio;
	XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);

	int i = 1;
	int maxTime;
	int MaxSignal = 0;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio, 1, 10);

     	data = XGpio_DiscreteRead(&Gpio, 2);


         	maxTime = data-2;



    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);





	}
			XGpio Gpio2;
	    	XGpio_Initialize(&Gpio2, XPAR_AXI_GPIO_2_DEVICE_ID);
	    	XGpio_DiscreteWrite(&Gpio2, 1, 0);
	    	XGpio_DiscreteWrite(&Gpio2, 2, 100);
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}





int delayGetter2 (int delay, int test2){

	XGpio Gpio1;
	XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);

	int i = 1;
	int maxTime;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio1, 1, 10);

     	data = XGpio_DiscreteRead(&Gpio1, 2);

     	maxTime = data-2;
    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);
	}
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}







