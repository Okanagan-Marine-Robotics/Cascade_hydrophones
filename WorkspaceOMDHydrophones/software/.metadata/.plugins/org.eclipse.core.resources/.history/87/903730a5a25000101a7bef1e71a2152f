#include "xuartps.h"  // Include the UART header for receiving data
#include "xil_printf.h"
#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID  // Adjust this to your UART instance
#define MAX_BUFFER_SIZE 64  // "test" is 4 characters long//118

void uartHandler(int* state, int* test1, int* test2) {
	/*
	 * XUartPs Uart_Ps;  // UART instance
		u8 ReceivedData[MAX_BUFFER_SIZE];
	 *
		XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
		XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
		int messageLength = 64;
		char message[messageLength];
		u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);
		int j = 0;
		int instruction;
		int instructionValue;
		while (messageLength>j){
		if (ReceivedData[j]=='<') {
			j++;
			instruction = ReceivedData[j] - 48;
			ReceivedData[j]=0;
			j++;
			j++;
			int n = 0;
			while (ReceivedData[j] != '>' && j < messageLength){
				message[n] = ReceivedData[j];
				ReceivedData[j]=0;
				j++;
				n++;
			}
			message[n] = '\0';
			instructionValue = atoi(message);
			}
		j++;
		}

		if (instruction==0){state = instructionValue;}
		else if (instruction==1) {test1=instructionValue;}
		else if (instruction==2) {test2=instructionValue;}
*/
	xil_printf("hi %d", state);
}
