#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xil_types.h"
#include "math.h"
#include <stdio.h>
#include "xuartps.h"  // Include the UART header for receiving data

#define UART_DEVICE_ID  XPAR_XUARTPS_0_DEVICE_ID  // Adjust this to your UART instance
#define MAX_BUFFER_SIZE  11  // "test" is 4 characters long//118

XUartPs Uart_Ps;  // UART instance
u8 ReceivedData[MAX_BUFFER_SIZE];  // Buffer for receiving data


int main() {

	init_platform();

	XUartPs_Config *Config = XUartPs_LookupConfig(UART_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);


	xil_printf("helloworld!\n");
	xil_printf("Starting Pinger Triangulation System\n");
	xil_printf("by James Williamsom v:0.1\n");
	int maxTime;
	int maxTime2;
	int state = 0;
	while(1){

		 // Receive 4 bytes of data (enough to hold "test")
		u32 bytesReceived = XUartPs_Recv(&Uart_Ps, ReceivedData, MAX_BUFFER_SIZE);

		        // checks state
		        if (bytesReceived == MAX_BUFFER_SIZE &&
		            ReceivedData[0] == '{' &&
		            ReceivedData[1] == '"' &&
					ReceivedData[2] == 's' &&
		            ReceivedData[3] == 't' &&
					ReceivedData[4] == 'a' &&
					ReceivedData[5] == 't' &&
					ReceivedData[6] == 'e' &&
					ReceivedData[7] == '"' &&
					ReceivedData[8] == ':' &&
					ReceivedData[9] == '{' ) {
		        	xil_printf("recieved\n");
		        	if (ReceivedData[10]=='0'){
		        		state = 0;
		        		xil_printf("entered state 0\n");
		        	}
		        	else if (ReceivedData[10]=='1'){
		        		state = 1;
		        		xil_printf("entered state 1\n");
		        	}
		        	/*
		        	char offset[16];  // Array to hold the subset of data (offset[0] to offset[15])

		        	    // Copy data from ReceivedData[23:39] to offset[0:15]
		        	for (int i = 0; i < 16; i++) {
		        	    offset[i] = ReceivedData[23 + i];
		        	}

		        	int offsetInt = atoi(offset);

		        	xil_printf("%d\n", offsetInt);

		        	//{"state":{0},"offset":{0000000000000000},"test_input1":{0000000000000000},"test_input2":{0000000000000000},"test_input3":{0000000000000000}}
				*/
		        }



		if (state == 1){



		}
		if (state == 0){
			maxTime = delayGetter(maxTime);
			maxTime2 = delayGetter2(maxTime2);
			double i = maxTime;
			double j = maxTime2;
			double solution[2];

			// Call solver
			solver(i, j, solution);
			//printf("{delayX: {%d},delayY: {%d},x: {%f},y: {%f}}\n",maxTime, maxTime2, solution[0], solution[1]);
		}
	}
	cleanup_platform();
	return 0;
}




int delayGetter (int delay){

	XGpio Gpio;
	XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);

	int i = 1;
	int maxTime;
	int MaxSignal = 0;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio, 1, 100);

     	data = XGpio_DiscreteRead(&Gpio, 2);


         	maxTime = data-2002;



    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);
	}
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}





int delayGetter2 (int delay){

	XGpio Gpio1;
	XGpio_Initialize(&Gpio1, XPAR_AXI_GPIO_1_DEVICE_ID);

	int i = 1;
	int maxTime;
	int data = 0;

	while (i < 4000) {
    	XGpio_DiscreteWrite(&Gpio1, 1, 10);

     	data = XGpio_DiscreteRead(&Gpio1, 2);

     	maxTime = data-2002;
    	i++;
    	//xil_printf("{\"Data\": %d}\n", data);
	}
	//xil_printf("%d\n", MaxSignal);
	return maxTime;
}







